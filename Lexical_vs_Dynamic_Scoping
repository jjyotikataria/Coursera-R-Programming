Lets understand the concept of lexical scoping and introduce dynamic scoping. Quoting an example from the week2 video : Scoping Rules - R Scoping Rules

Considering these two functions f and g,
 
y <- 10

f <- function(x){
    y <- 2
    y^2 + g(x)
}

g <- function(x){
    x*y
}

In the f function, y is a free variable , g also as both are not defined in the function and are not an argument also. 
In the g function, y is a free variable.

f(3) will be evaluated as what, is the question here?

f(3) = y^2 + g(3) , wherein, g(x) = x*y (here it is g(3) = 3*y)

What value of y to take now? y <- 10 defined in the global environment or y <- 2 defined in  the function f ???????
Thats where the difference lies in lexical and dynamic scoping.

Lexical scoping : The value of a free variable is looked up in the environment from which a function is defined i.e. global environment (y <- 10 will be considered)
Dynamic scoping : the value of a free variable is looked up in the environment from which a function is called i.e. calling environment or the parent frame (y <- 2 will be considered)


### Interestingly, it may be possible wherein a calling environment and the defining environment are the same itself. Lets consider a case wherein a function is defined in the global environment and is being called from the same.

g <- function(x) {
   a <- 3
   x+a+y
 }
 
 y is a free variable here (as it is not defined in the function and not in the argument as well). a is a local variable.
 Lets find out g(2) ?
 
 x is 2, a is 3 but y still needs a value?
 
 Lets define y <- 4 and then perform g(2)? What do we get?
 We get 9 as the result. How?
 
 g(2) = x + a + y 
      = 2 + 3 + 4 
      = 9
 
 So, the value of y was looked up in the calling environment which is nothing but the global environment in this case.
















