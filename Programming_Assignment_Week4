Assignment Tasks:
_______________________________________________________________________________________________________________________________________________________________________________

1. Plot the 30-day mortality rates for heart attack
_______________________________________________________________________________________________________________________________________________________________________________

Solution:

outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")  
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11], xlab="Deaths", main="Mortality rate for heart attack", col="lightblue")

Explanation:

> colClasses ????
Two benefits from this:

First: If you can see the difference below, loading a huge data with this argument significantly reduces time, because read.csv need not to make an educated guess about the 
class of the feature(column header)

> system.time(outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character"))
   user  system elapsed 
   0.06    0.00    0.07 
 
> system.time(outcome <- read.csv("outcome-of-care-measures.csv"))
   user  system elapsed 
   0.17    0.00    0.25 

Second: If you have trailing zeroes in the starting of the numbers, they will be interpreted as numeric class but this may not be what you wanted.

>read.csv("info.csv", colClasses = "character")

rank    pin_code
first   100034
second  04647

>read.csv("info.csv")

rank    pin_code
first   100034
second  04647

-----------------
as.numeric ??
-----------------

Because we originally read the data in as character (by specifying colClasses = "character" we need to coerce the column to be numeric in order to plot histogram which 
depends on the numerical data here.

_______________________________________________________________________________________________________________________________________________________________________________

2 Finding the best hospital in a state
_______________________________________________________________________________________________________________________________________________________________________________

Understanding the problem- It takes time to understand the problem first. Here, we need to give two arguments for the function best i.e. state two letter code and which 
outcome we are considering from the three viz, "heart attack”, “heart failure”, or “pneumonia”. The function should return the hospital name with the least mortality rate. 
It makes sense as it is one of the quality determining factor for a hospital. In case, two different hospitals from the same state share the least same mortality rate, then 
the hospitals should be sorted alphabetically and the first should be reported.


Solution:

best <- function(state, outcome){
    
    file <- read.csv("outcome-of-care-measures.csv", header = TRUE, colClasses = "character")
    
    data <- file[,c(2,7,11,17,23)]
    colnames(data) <- c("hospital name","state","heart attack","heart failure","pneumonia")
    
    if(!state %in% data[,"state"]){
        stop("Invalid state")
    }
    
    if(!outcome %in% c("heart attack","heart failure","pneumonia")){
        stop("Invalid outcome")
    }
    
    data <- data[(data[, "state"] == state), ]              ## we can check if we just got that state or not by unique(data["state"])
    data[, outcome] <- suppressWarnings(as.numeric(data[, outcome]))
    data <- data[!is.na(data[, outcome]), ]
    data <- data[order(data[, outcome]), ]
    names <- data[data[, outcome] == min(data[, outcome]),1]
    sort(names)[1]   
 
    }  

Explanation:

---->  The dataset is quite big, I tried dealing with the whole data in Rstudio but its messy and not much understandable at a glance when we do head,so I decided to just deal with the columns relevant for creating this 
best function.

---->  header = TRUE is added because our data has headers (Provider Number,	Hospital Name,	Address 1 ..) and we want R to start counting the data entries from row2.

outcomes[1, ] will give

            Provider.Number         Hospital.Name                            Address.1
1           10001                   SOUTHEAST ALABAMA MEDICAL CENTER         1108 ROSS CLARK CIRCLE

and not just this             Provider.Number         Hospital.Name                            Address.1

----> read.csv checks the first few rows of your data to see whether to treat each variable as numeric. If it finds non-numeric values, it assumes the variable is character data, and character variables are converted to factors. Note that if a variable can't be converted to numeric then it will be converted to factor as default which makes it more difficult to convert to number. Therefore, it can be advisable just to read all variables in as 'character' colClasses = "character" and then convert the specific columns to numeric once the csv is read.

----> Take care of this difference wherein you cannot convert a list directly into a numeric vector, you need to unlist it first.

> data["heart attack"] <- as.numeric(data["heart attack"])
Error: (list) object cannot be coerced to type 'double'
> data[, "heart attack"] <- as.numeric(data[, "heart attack"])
Warning message:
NAs introduced by coercion


